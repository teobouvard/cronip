#!/usr/bin/env python3

import requests
import os
import logging
import discord
import platform
import argparse
from logging.handlers import RotatingFileHandler
from discord.ext import commands

STORE = os.path.join(os.environ["HOME"], ".config", "turnip")
os.makedirs(STORE, exist_ok=True)
LOG_FILE = os.path.join(STORE, "log")
IP_DB = os.path.join(STORE, "ip")

# set up logging
# debug to rotating file, errors to stderr
logger = logging.getLogger()
formatter = logging.Formatter("[%(asctime)s] %(levelname)s: %(message)s")
logger.setLevel(logging.DEBUG)

stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.ERROR)
stream_handler.setFormatter(formatter)

file_handler = RotatingFileHandler(filename=LOG_FILE, maxBytes=5 * 1e3, backupCount=0)
file_handler.setFormatter(formatter)
file_handler.setLevel(logging.INFO)

logger.addHandler(stream_handler)
logger.addHandler(file_handler)


class TurnipCog(commands.Cog):
    def __init__(self, bot, server, channel):
        self.bot = bot
        self.server = server
        self.channel = channel
        self.old_ip = self.get_last_ip()
        self.current_ip = self.get_current_ip()

    @commands.Cog.listener()
    async def on_ready(self):
        logging.debug(f"{self.bot.user} has connected to Discord")
        if self.current_ip != self.old_ip:
            logging.info(f"public ip changed from {self.old_ip} to {self.current_ip}")
            await self.send_notification()
            self.save_current_ip()
        else:
            logging.info("ip address did not change since last time")

        await self.bot.logout()

    async def send_notification(self):
        guild = discord.utils.get(self.bot.guilds, name=self.server)
        if guild is not None:
            channel = discord.utils.get(guild.text_channels, name=self.channel)
            if channel is not None:
                await channel.send(f"[{platform.node()}] {self.current_ip}")
            else:
                logging.error(
                    f'channel "{self.channel}" not found on server "{self.server}"'
                )
        else:
            logging.error(f'server "{self.server}" not found')

    def get_current_ip(self):
        # TODO add multiple sources in case servers are down
        res = requests.get("http://ifconfig.me")
        if res.status_code == requests.status_codes.codes["ok"]:
            current_ip = res.text.strip()
            return current_ip

    def get_last_ip(self):
        if not os.path.isfile(IP_DB):
            return None
        else:
            with open(IP_DB, "r") as f:
                old_ip = f.read()
                return old_ip

    def save_current_ip(self):
        with open(IP_DB, "w") as f:
            f.write(self.current_ip)


def get_args():
    args = argparse.ArgumentParser()
    args.add_argument("--token", type=str, required=True)
    args.add_argument("--server", type=str, required=True)
    args.add_argument("--channel", type=str, required=True)
    return args.parse_args()


if __name__ == "__main__":
    args = get_args()

    bot = commands.Bot(command_prefix="", description="IP change watcher")
    bot.add_cog(TurnipCog(bot, server=args.server, channel=args.channel))
    bot.run(args.token)
